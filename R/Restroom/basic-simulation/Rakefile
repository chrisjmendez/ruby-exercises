# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
# Office Restroom Simulation
#
# http://www.stuartellis.name/articles/rake/#using-environment-variables
#

require 'rake'
require 'rake/clean'
require 'pry'
require 'csv'


# App Specific Code
require_relative 'src/simulation/config' #<= Look Here First
require_relative 'src/simulation/restroom'
require_relative 'src/simulation/person'
require_relative 'src/simulation/facility'

task default: 'monte_carlo:main'


namespace :monte_carlo do  
  # Tell Task that we're using these paths as directories
  directory Config.instance.input_dir  
  directory Config.instance.output_dir


  desc "A. Run in Sequence."
  task :main => [:reset, :run_simulation, :create_file, :process_data] do
    puts "Simulation, Analysis and Graph Complete!"
  end    

  
  desc 'B. Reset the simulation by deleting old data'
  task :reset do
    FileUtils.rm(Config.instance.out_path) if File.exist?(Config.instance.out_path)
    puts "Reset Complete"
  end


  desc 'C. Run a Monte Carlo Simulation to find out if 1 restroom is OK for 70 people.'
  task :run_simulation do    
    puts "Simulation Start"
    @population_range = 10..600
    @data             = {}
    
    frequency         = 3
    use_duration      = 1
    
    @population_range.step(10).each do |population_size|
      Person.population.clear
      population_size.times { Person.population << Person.new(frequency, use_duration) }
      
      @data[population_size] = []
      restroom = Restroom.new

      Person::DURATION.times do |t|
        @data[population_size] << restroom.queue.size
        queue = restroom.queue.clone
        restroom.queue.clear

        unless queue.empty?
          restroom.enter queue.shift
        end
        
        Person.population.each do |person|
          if person.need_to_go?
            restroom.enter person
          end
        end
        restroom.tick
      end
    end    
    puts "Simulation End"
  end


  desc 'D. Create a CSV file using Ruby'
  file :create_file => [Config.instance.output_dir] do |t, args|    
    # Example of how to print data into a CSV file
    # sh %{ echo #{Date.today.to_s} > "#{output_dir}/simulation.csv" }
    puts "CSV Export Start"
    CSV.open(Config.instance.csv_path, 'w') do |csv|
      # Columns
      lbl = []
      @population_range.step(10).each { |population_size| lbl << population_size }
      csv << lbl      
      # Rows
      Person::DURATION.times do |t|
        row = []
        @population_range.step(10).each { |population_size| row << @data[population_size][t] }
        csv << row
      end
    end
    puts "CSV Export End"
  end


  desc 'E. Process the CSV data using R'
  task :process_data do
    path = FileList[Config.instance.csv_path].pathmap('%f')[0]
    sh %{ R CMD BATCH --no-save --no-restore #{Config.instance.r_path} #{Config.instance.out_path} & }
    puts "Processing Data Complete"
  end  
end
